Ejercicio4

• Decidir si un conjunto de enteros se puede particionar en dos conjuntos de igual suma:
- Se parte de un conjunto xs, tomando de a un elemento y agregandolo a otro conjunto ys. 
- Sumamos los elementos que se tengan en ambos conjuntos
- Si ambas sumatorias dan igual, entonces:
		-existe una particion del conjunto original que cumple la condicion. 
		- Sino: llamar recursivamente con ambos conjuntos.

Si al llegar al caso base, xs está vacio, entonces no hay particion.

PseudoCodigo:

sumaParticion -> [int] -> [int] -> Bool
	[] ys = falso
	(x:xs) ys = if (suma xs) == (suma x:ys) then True else sumaParticion xs x:ys


• Dadas dos cadenas, decidir si las mismas son anagramas (una es permutacion de la otra):
Una posible solucion es la siguiente:
	- Comparar la longitud de las listas, si son diferentes, entonces False, caso contrario:
		- Dadas las dos listas, ordenarlas alfabeticamente
		- Comparar cada elemento de las dos listas ordenadas, si un elemento no coincide, False
		- Si se llega al caso base (ambas listas vacias) entonces las cadenas son anagramas


• Dado un número natural n, descomponerlo en sus factores primos:
	- Dado un numero primo:
		- Calcular todos los numeros primos menores a él
		- Con dicha lista de numeros, dividir n por el primer
		numero primo en la lista, si su resto es 0, se agrega
		el numero a una lista de factores primos, caso contrario, se vuelve a dividir por el mismo valor, pero con diferente factor primo
		- Al resultado de la division con resto 0 lo guardamos, y sobre él, se realiza el siguiente calculo
		- Cuando n sea igual a 1 (por el proceso de divisiones), se termina el algoritmo
		- En la lista donde se almacenaron los primos por los cuales la division tenia resto 0, corresponde
		a la factorizacion del numero n.

	El algoritmo para encontrar primos menores a n natural:
	
	sieve(n)
	for p←2 to n do A[p]←p
	for p←2 to [√n] 
	do //see note before pseudocode
		if A[p] != 0 //p hasn’t been eliminated on previous passes
		j ← p ∗ p
		while j ≤ n do
		A[j]←0  //mark element as eliminated
		j ←j + p //copy the remaining elements of A to array L of the primes
		
		i ←0
		for p←2 to n do
			if A[p] != 0
			L[i]←A[p]
		i ←i + 1
	return L


• Dadas dos cadenas p y s, decida si p es una subcadena de s. 
	Una forma de dar solucion a esto es, dadas las dos listas,
	suponiendo que tenemos alguna forma de acceso directo a los elementos
	- Comprobar para la cadena s si el primer elemento de la cadena p coincide
		- Si coincide o no, pasa al siguiente elemento
	- En la cadena s, si el elemtento coincide con el visto en p
		- Se realiza la comprobacion con el siguiente elemento de s
		- Si en algun momento, no existe la coincidencia, se repite el proceso
		desde el primer elemento de s

• Dadas dos cadenas p y s, decida si p es una subsecuencia de s.
 - Dada la subsecuencia p, verificar en ella si todos los elementos
 de s están en p

• Dada una secuencia s de numeros, encontrar el k-esimo elemento más grande en s
	-Dada la secuencia numeros, tomamos el primer elemento de la lista y lo comparamos con el siguiente
	si el primer elemento es mayor que el segundo, se intercambian. Asi hasta llegar al final de la lista
	- Al final de la ejecucion, el elemento más grande estará al final de la lista

