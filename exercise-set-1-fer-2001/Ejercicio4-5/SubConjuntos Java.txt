    (0011) << (0001) // Desplaza 0011 una vez dando 110
    (0011) << (0011) // Desplaza 0011 tres veces dando 11000

    (1100) >> (0001) // Desplaza 1100 una vez dando 0110
    (1000) >> (0011) // Desplaza 1100 tres veces dando 0001


    (0101) & (0011) = 0001
    0101 AND    (decimal 5)
    0011        (decimal 3)
    --------
    0001        (decimal 1)

    12 >> 1  // Sería 12 / 2 = 6
    12 >> 2  // Sería 12 / 2 = 6; 6/2 = 3



	// Solucion iterativa 0(2^n) en el peor caso (Calcula subConjuntos, no subSecuencias)
	public static List<List<Integer>> subSecuencias(Integer[] array){
		int n = array.length;
		List<List<Integer>> result = new ArrayList<>();
		// Se omite el caso del subSegmento vacio
		for (int i =0; i < (1<<n); i++) { // Va desde 0 hasta 2^n (donde n es la cantidad de elementos en array)
			ArrayList<Integer> aux = new ArrayList<>();
			// Calcula subSegmentos
			for (int j = 0; j < n; j++)
				if ((i & (1 << j)) > 0){
					aux.add(array[j]);
				}
			result.add(aux);
		}
		return result;
	}